{"version":3,"sources":["components/FinalScoreModal.js","components/Loading.js","components/NavBar.js","components/Answers.js","components/Question.js","components/QuizSettings.js","components/FailMessage.js","components/NoMatchMessage.js","data/data.js","views/App.js","reportWebVitals.js","index.js"],"names":["FinalScoreModal","props","score","questionCount","updateScore","goToSettingsOrQuiz","className","id","tabIndex","aria-labelledby","aria-hidden","type","data-bs-dismiss","aria-label","onClick","finalScoreModalDiv","document","getElementById","Modal","getInstance","hide","startNewQuiz","Loading","role","NavBar","href","Answers","allAnswers","checkAnswer","answerStyles","parseEntities","map","answer","index","e","ANSWER_STYLE","QUESTION_KEYS","txt","DOMParser","parseFromString","body","innerText","getAllAnswers","correctAnswer","otherAnswers","answers","Object","assign","push","array","i","length","j","Math","floor","random","shuffleArray","answerFeedback","alertType","alertMsg","timeout","timeoutAmount","Date","getTime","innerHTML","setTimeout","removeAnswerFeedback","alertId","removeChild","Question","initialStyles","Array","fill","useState","question","setAllAnswers","setAnswerStyles","showNextQuestionBtn","setShowNextQuestionBtn","showFinishQuizBtn","setShowFinishQuizBtn","isAnswered","setIsAnswered","questionNumber","nextQuestion","increaseScore","category","difficulty","useEffect","style","maxWidth","selectedAnswer","target","newStyles","data-bs-toggle","data-bs-target","QuizSettings","showSettings","categories","difficulties","amount","updateParams","updateStatus","isValidNumberOfQuestions","onSubmit","preventDefault","STATUS","LOADING","htmlFor","value","onChange","min","max","display","disabled","FailMessage","status","FAIL","icon","faCog","NoMatchMessage","responseCode","setResponseCode","setShowSettings","SUCCESS","ANY","QUESTION_DIFFICULTIES","CATEGORIES","CATEGORY_ID_MAP","requestQuiz","userParams","a","url","createQueryString","fetch","response","json","quizData","params","p","findCategoryId","join","App","setParams","quizQuestions","setQuizQuestions","questionIdx","setQuestionIdx","setQuestionCount","setScore","showQuiz","setShowQuiz","setStatus","then","data","console","log","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.6f9b4878.chunk.js","sourcesContent":["import { Modal } from \"bootstrap\";\n\nconst FinalScoreModal = (props) => {\n  const { score, questionCount, updateScore, goToSettingsOrQuiz } = props;\n\n  /**\n   * Handler when user clicks the \"Start New Quiz\" button.\n   * Sends user back to Settings view.\n   */\n  const startNewQuiz = () => {\n    let finalScoreModalDiv = document.getElementById(\"finishQuizModal\");\n    let finishQuizModal = Modal.getInstance(finalScoreModalDiv);\n    finishQuizModal.hide();\n    goToSettingsOrQuiz(false, true);\n    updateScore(0);\n  };\n\n  return (\n    <div\n      className=\"modal fade\"\n      id=\"finishQuizModal\"\n      tabIndex=\"-1\"\n      aria-labelledby=\"finishQuizModalLabel\"\n      aria-hidden=\"true\"\n    >\n      <div className=\"modal-dialog\">\n        <div className=\"modal-content\">\n          <div className=\"modal-header\">\n            <h5 className=\"modal-title\" id=\"finishQuizModalLabel\">\n              Quiz Score!\n            </h5>\n            <button\n              type=\"button\"\n              className=\"btn-close\"\n              data-bs-dismiss=\"modal\"\n              aria-label=\"Close\"\n            ></button>\n          </div>\n          <div className=\"modal-body text-center\">\n            <h3>\n              Your score: {score}/{questionCount}\n            </h3>\n          </div>\n          <div className=\"modal-footer\">\n            <button\n              type=\"submit\"\n              className=\"btn btn-primary\"\n              onClick={() => startNewQuiz()}\n            >\n              Start New Quiz\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default FinalScoreModal;\n","const Loading = () => {\n  return (\n    <div className=\"loading\">\n      <div className=\"spinner-border text-info\" role=\"status\" />\n      <p>Loading... please wait</p>\n    </div>\n  );\n};\n\nexport default Loading;\n","const NavBar = (props) => {\n  return (\n    <nav className=\"navbar navbar-expand-lg navbar-dark bg-primary\">\n      <div className=\"container-fluid\">\n        <a\n          className=\"navbar-brand\"\n          href=\"https://pages.github.ccs.neu.edu/cs7580sp21-seattle/stefan_hristov_assignment3\"\n        >\n          Trivia Quiz!\n        </a>\n      </div>\n    </nav>\n  );\n};\n\nexport default NavBar;\n","const Answers = (props) => {\n  const { allAnswers, checkAnswer, answerStyles, parseEntities } = props;\n\n  return (\n    <div className=\"answers container mt-4 d-grid\">\n      {allAnswers.map((answer, index) => (\n        <button\n          key={index}\n          id={index}\n          type=\"button\"\n          className={answerStyles[index]}\n          onClick={(e) => checkAnswer(e)}\n        >\n          {parseEntities(answer)}\n        </button>\n      ))}\n    </div>\n  );\n};\n\nexport default Answers;\n","import { useEffect, useState } from \"react\";\nimport Answers from \"./Answers\";\n\n/**\n * Maximum answers per API\n */\nconst MAX_ANSWERS = 4;\n\n/**\n * Default answer button styles.\n */\nconst ANSWER_STYLE = {\n  REGULAR: \"btn btn-primary m-2\",\n  INCORRECT: \"btn btn-danger m-2\",\n  CORRECT: \"btn btn-success m-2\",\n};\n\n/**\n * API Keys for question results\n */\nconst QUESTION_KEYS = {\n  CORRECT_ANSWER: \"correct_answer\",\n  INCORRECT_ANSWERS: \"incorrect_answers\",\n  QUESTION_TEXT: \"question\",\n  CATEGORY: \"category\",\n  DIFFICULTY: \"difficulty\",\n};\n\n/**\n * Helper to parse Unicode text into regular text.\n * @param {String} txt - Unicode text to be parsed\n * @returns {String} regulartext\n */\nconst parseEntities = (txt) =>\n  new DOMParser().parseFromString(txt, \"text/html\").body.innerText;\n\n/**\n * Helper function to shuffle an array\n * @param {*} array - array to be shuffled\n */\nconst shuffleArray = (array) => {\n  for (let i = array.length - 1; i > 0; i--) {\n    let j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n};\n\n/**\n * Function that combines the correct and incorrect answers\n * into one array and shuffles them.\n * @param {String} correctAnswer correct answer for the question\n * @param {Array} otherAnswers Array of Strings containing other incorrect answers for the question\n * @returns {Array} shuffled answer array\n */\nconst getAllAnswers = (correctAnswer, otherAnswers) => {\n  let answers = [];\n  Object.assign(answers, otherAnswers);\n  answers.push(correctAnswer);\n  shuffleArray(answers);\n  return answers;\n};\n\n/**\n * Helper function to show/hide an alert when the user answers a question\n * @param {string} alertType - The Bootstrap alert class to use.\n * @param {string} alertMsg - The message to display in the alert.\n * @param {boolean} timeout - Whether the alert should be removed after\n * two seconds. Default = true.\n * * @param {Number} timeoutAmount - Timeout amount in milliseconds. Default = 2 seconds\n */\nconst answerFeedback = (\n  alertType,\n  alertMsg,\n  timeout = true,\n  timeoutAmount = 2000\n) => {\n  // Creates a unique ID from the time in milliseconds since 1/1/1970\n  let id = new Date().getTime();\n  document.getElementById(\"action-feedback\").innerHTML =\n    '<div class=\"text-center alert ' +\n    alertType +\n    '\" role=\"alert\" id=\"' +\n    id +\n    '\">' +\n    alertMsg +\n    \"</div>\";\n  if (timeout) setTimeout(() => removeAnswerFeedback(id), timeoutAmount);\n};\n\n/**\n * Helper function to remove question feedback alert.\n */\nconst removeAnswerFeedback = (alertId) => {\n  if (alertId) {\n    // If a specific ID is provided (for use when a timer runs out)\n    if (document.getElementById(alertId))\n      // Checking that the alert is still in the DOM\n      document\n        .getElementById(\"action-feedback\")\n        .removeChild(document.getElementById(alertId));\n  } else document.getElementById(\"action-feedback\").innerHTML = \"\";\n};\n\nconst Question = (props) => {\n  const initialStyles = Array(MAX_ANSWERS).fill(ANSWER_STYLE.REGULAR);\n  const [allAnswers, setAllAnswers] = useState(\n    getAllAnswers(\n      props.question[QUESTION_KEYS.CORRECT_ANSWER],\n      props.question[QUESTION_KEYS.INCORRECT_ANSWERS]\n    )\n  );\n  const [answerStyles, setAnswerStyles] = useState(initialStyles);\n  const [showNextQuestionBtn, setShowNextQuestionBtn] = useState(false);\n  const [showFinishQuizBtn, setShowFinishQuizBtn] = useState(false);\n  const [isAnswered, setIsAnswered] = useState(false);\n\n  const { questionNumber, questionCount, nextQuestion, increaseScore } = props;\n\n  let correctAnswer = props.question[QUESTION_KEYS.CORRECT_ANSWER];\n  let question = props.question[QUESTION_KEYS.QUESTION_TEXT];\n  let category = props.question[QUESTION_KEYS.CATEGORY];\n  let difficulty = props.question[QUESTION_KEYS.DIFFICULTY];\n\n  useEffect(() => {\n    setAllAnswers(\n      getAllAnswers(\n        props.question[QUESTION_KEYS.CORRECT_ANSWER],\n        props.question[QUESTION_KEYS.INCORRECT_ANSWERS]\n      )\n    );\n  }, [props.question]);\n\n  /**\n   * Handler for when a user answers a questions.\n   * Displays either the next question button or finish quiz button.\n   */\n  const handleQuestionAnswered = () => {\n    questionNumber < questionCount\n      ? setShowNextQuestionBtn(true)\n      : setShowFinishQuizBtn(true);\n  };\n\n  /**\n   * Handler when a user clicks to move to next question.\n   */\n  const moveToNextQuestion = () => {\n    setAnswerStyles(initialStyles);\n    setShowNextQuestionBtn(false);\n    setIsAnswered(false);\n    nextQuestion();\n  };\n\n  /**\n   * Handler that check the selected answer of the user.\n   * @param {*} e - event\n   */\n  const checkAnswer = (e) => {\n    if (!isAnswered) {\n      const selectedAnswer = e.target.innerText;\n      let newStyles = Object.assign([], answerStyles);\n      let timeoutAmount = 1500;\n      if (selectedAnswer === parseEntities(correctAnswer)) {\n        newStyles[e.target.id] = ANSWER_STYLE.CORRECT;\n        answerFeedback(\n          \"alert-success\",\n          \"Good Job! Correct.\",\n          true,\n          timeoutAmount\n        );\n        increaseScore();\n      } else {\n        newStyles[e.target.id] = ANSWER_STYLE.INCORRECT;\n        answerFeedback(\n          \"alert-danger\",\n          \"Sorry...Incorrect.\",\n          true,\n          timeoutAmount\n        );\n      }\n      // time out for 1.5 seconds before displaying next question or finish quiz button\n      // after a user has selected an answer\n      setTimeout(() => handleQuestionAnswered(), timeoutAmount);\n      setAnswerStyles(newStyles);\n      setIsAnswered(true);\n    }\n  };\n\n  return (\n    <div className=\"d-flex mt-5 justify-content-center\">\n      <div className=\"card\" style={{ maxWidth: \"800px\" }}>\n        <div className=\"card-header\">\n          <div className=\"container\">\n            <div className=\"row\">\n              <div className=\"d-flex col-sm justify-content-center\">\n                <h3 className=\"text-center\">\n                  Question {questionNumber}/{questionCount}\n                </h3>\n              </div>\n              <div className=\"d-flex col-sm align-items-center justify-content-center\">\n                <span className=\"badge rounded-pill bg-dark m-2\">\n                  {category}\n                </span>\n              </div>\n              <div className=\"d-flex col-sm align-items-center justify-content-center\">\n                <span className=\"badge rounded-pill bg-dark m-2\">\n                  {difficulty}\n                </span>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div className=\"card-body text-justify\">\n          <h5 className=\"card-title\">{parseEntities(question)}</h5>\n          <div id=\"action-feedback\"></div>\n          <Answers\n            correctAnswer={correctAnswer}\n            allAnswers={allAnswers}\n            answerStyles={answerStyles}\n            checkAnswer={checkAnswer}\n            parseEntities={parseEntities}\n          />\n        </div>\n        {showNextQuestionBtn ? (\n          <div className=\"card-footer text-center\">\n            <button\n              type=\"button\"\n              className=\"btn btn-dark\"\n              onClick={() => moveToNextQuestion()}\n            >\n              Next Question\n            </button>\n          </div>\n        ) : null}\n        {showFinishQuizBtn ? (\n          <div className=\"card-footer text-center\">\n            <button\n              type=\"button\"\n              className=\"btn btn-dark\"\n              data-bs-toggle=\"modal\"\n              data-bs-target=\"#finishQuizModal\"\n            >\n              Finish Quiz\n            </button>\n          </div>\n        ) : null}\n      </div>\n    </div>\n  );\n};\n\nexport default Question;\n","import { STATUS } from \"../views/App\";\n\nconst QuizSettings = (props) => {\n  const {\n    showSettings,\n    categories,\n    difficulties,\n    amount,\n    category,\n    difficulty,\n    updateParams,\n    updateStatus,\n    goToSettingsOrQuiz,\n  } = props;\n\n  const MIN_QUESTIONS = 1;\n  const MAX_QUESTIONS = 50;\n\n  /**\n   * Handler for quiz configuration submission.\n   * Fetches the quiz data from API and displays\n   * Quiz questions to user.\n   * @param {*} e - event\n   */\n  const formSubmit = (e) => {\n    e.preventDefault();\n    goToSettingsOrQuiz(true, false);\n    updateStatus(STATUS.LOADING);\n  };\n\n  let isValidNumberOfQuestions =\n    amount >= MIN_QUESTIONS && amount <= MAX_QUESTIONS;\n\n  return (\n    showSettings && (\n      <div className=\"container mt-5\" style={{ maxWidth: \"800px\" }}>\n        <form onSubmit={formSubmit} className=\"needs-validation\">\n          <div>\n            <label htmlFor=\"amount\" className=\"form-label\">\n              Number of Questions:\n            </label>\n            <input\n              type=\"number\"\n              className=\"form-control\"\n              id=\"amount\"\n              value={amount}\n              onChange={(e) =>\n                updateParams({\n                  amount: e.target.value,\n                  category,\n                  difficulty,\n                })\n              }\n              min={MIN_QUESTIONS}\n              max={MAX_QUESTIONS}\n            />\n          </div>\n          <div\n            className=\"invalid-feedback\"\n            style={\n              !isValidNumberOfQuestions\n                ? { display: \"block\" }\n                : { display: \"none\" }\n            }\n          >\n            {`Please provide a number between ${MIN_QUESTIONS} - ${MAX_QUESTIONS}.`}\n          </div>\n          <div className=\"mt-3\">\n            <label htmlFor=\"triviaCategory\" className=\"form-label\">\n              Select Category:\n            </label>\n            <select\n              className=\"form-select\"\n              id=\"triviaCategory\"\n              value={category}\n              onChange={(e) =>\n                updateParams({\n                  amount,\n                  category: e.target.value,\n                  difficulty,\n                })\n              }\n            >\n              {categories.map((category, index) => (\n                <option key={index} value={category}>\n                  {category}\n                </option>\n              ))}\n            </select>\n          </div>\n          <div className=\"mt-3\">\n            <label htmlFor=\"triviaDifficulty\" className=\"form-label\">\n              Select Difficulty:\n            </label>\n            <select\n              className=\"form-select\"\n              id=\"triviaDifficulty\"\n              value={difficulty}\n              onChange={(e) =>\n                updateParams({\n                  amount,\n                  category,\n                  difficulty: e.target.value,\n                })\n              }\n            >\n              {difficulties.map((difficulty, index) => (\n                <option key={index} value={difficulty}>\n                  {difficulty}\n                </option>\n              ))}\n            </select>\n          </div>\n          <div className=\"mt-3\">\n            <button\n              type=\"submit\"\n              className=\"btn btn-primary\"\n              disabled={!isValidNumberOfQuestions}\n            >\n              Submit\n            </button>\n          </div>\n        </form>\n      </div>\n    )\n  );\n};\n\nexport default QuizSettings;\n","import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faCog } from \"@fortawesome/free-solid-svg-icons\";\nimport { STATUS } from \"../views/App\";\n\nconst FailMessage = (props) => {\n  const { status, goToSettingsOrQuiz, showSettings } = props;\n\n  return (\n    !showSettings &&\n    status === STATUS.FAIL && (\n      <div className=\"container text-lg-center mt-5\">\n        <p>Oops... Something went wrong. Please try again.</p>\n        <div className=\"text-center\">\n          <button\n            type=\"button\"\n            className=\"btn btn-primary\"\n            onClick={() => goToSettingsOrQuiz(false, true)}\n          >\n            <FontAwesomeIcon icon={faCog} /> Trivia Criteria\n          </button>\n        </div>\n      </div>\n    )\n  );\n};\n\nexport default FailMessage;\n","import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faCog } from \"@fortawesome/free-solid-svg-icons\";\nimport { STATUS } from \"../views/App\";\n\nconst NoMatchMessage = (props) => {\n  const { status, responseCode, setResponseCode, setShowSettings } = props;\n\n  /**\n   * Handler when user clicks on  \"Trivia Criteria\" button.\n   * User is sent back to settings view.\n   */\n  const goToSettings = () => {\n    setResponseCode(0);\n    setShowSettings(true);\n  };\n\n  return (\n    responseCode === 1 &&\n    status === STATUS.SUCCESS && (\n      <div className=\"container text-xl-center mt-5\">\n        <p>\n          Sorry, we don't have enough questions that match your selected\n          criteria. Please change your selected criteria and try again.\n        </p>\n        <div className=\"text-center\">\n          <button\n            type=\"button\"\n            className=\"btn btn-primary\"\n            onClick={() => goToSettings()}\n          >\n            <FontAwesomeIcon icon={faCog} /> Trivia Criteria\n          </button>\n        </div>\n      </div>\n    )\n  );\n};\n\nexport default NoMatchMessage;\n","export const ANY = \"Any\";\nexport const ANY_DIFFICULTY = \"Any Difficulty\";\n\nexport const QUESTION_DIFFICULTIES = [ANY, \"easy\", \"medium\", \"hard\"];\n\nexport const ANY_CATEGORY = \"Any Category\";\n\nexport const CATEGORIES = [\n  ANY,\n  \"General Knowledge\",\n  \"Entertainment: Books\",\n  \"Entertainment: Film\",\n  \"Entertainment: Music\",\n  \"Entertainment: Musicals & Theatres\",\n  \"Entertainment: Television\",\n  \"Entertainment: Video Games\",\n  \"Entertainment: Board Games\",\n  \"Science & Nature\",\n  \"Science: Computers\",\n  \"Science: Mathematics\",\n  \"Mythology\",\n  \"Sports\",\n  \"Geography\",\n  \"History\",\n  \"Politics\",\n  \"Art\",\n  \"Celebrities\",\n  \"Animals\",\n  \"Vehicles\",\n  \"Entertainment: Comics\",\n  \"Science: Gadgets\",\n  \"Entertainment: Japanese Anime & Manga\",\n  \"Entertainment: Cartoon & Animations\",\n];\n\nexport const CATEGORY_ID_MAP = {\n  \"General Knowledge\": 9,\n  \"Entertainment: Books\": 10,\n  \"Entertainment: Film\": 11,\n  \"Entertainment: Music\": 12,\n  \"Entertainment: Musicals & Theatres\": 13,\n  \"Entertainment: Television\": 14,\n  \"Entertainment: Video Games\": 15,\n  \"Entertainment: Board Games\": 16,\n  \"Science & Nature\": 17,\n  \"Science: Computers\": 18,\n  \"Science: Mathematics\": 19,\n  \"Mythology\": 20,\n  \"Sports\": 21,\n  \"Geography\": 22,\n  \"History\": 23,\n  \"Politics\": 24,\n  \"Art\": 25,\n  \"Celebrities\": 26,\n  \"Animals\": 27,\n  \"Vehicles\": 28,\n  \"Entertainment: Comics\": 29,\n  \"Science: Gadgets\": 30,\n  \"Entertainment: Japanese Anime & Manga\": 31,\n  \"Entertainment: Cartoon & Animations\": 32,\n};\n\nexport const DUMMY_DATA = [\n  {\n    category: \"Geography\",\n    type: \"multiple\",\n    difficulty: \"medium\",\n    question: \"What is the capital of Peru?\",\n    correct_answer: \"Lima\",\n    incorrect_answers: [\"Santiago\", \"Montevideo\", \"Buenos Aires\"],\n  },\n];\n","import { useEffect, useState } from \"react\";\nimport FinalScoreModal from \"../components/FinalScoreModal\";\nimport Loading from \"../components/Loading\";\nimport NavBar from \"../components/NavBar\";\nimport Question from \"../components/Question\";\nimport QuizSettings from \"../components/QuizSettings\";\nimport FailMessage from \"../components/FailMessage\";\nimport NoMatchMessage from \"../components/NoMatchMessage\";\nimport {\n  CATEGORIES,\n  QUESTION_DIFFICULTIES,\n  ANY,\n  CATEGORY_ID_MAP,\n} from \"../data/data\";\n\n/**\n * Network Status Constants\n */\nexport const STATUS = {\n  LOADING: \"loading\",\n  SUCCESS: \"success\",\n  FAIL: \"fail\",\n};\n\n/**\n * Fetches quiz data from Open Trivia API\n * @param {*} userParams - the user specified parameters\n * @returns {*} quizData response\n */\nconst requestQuiz = async (userParams) => {\n  const BASE_URL = \"https://opentdb.com/api.php\";\n  let url = BASE_URL + createQueryString(userParams);\n  let response = await fetch(url);\n  let quizData = await response.json();\n  return quizData;\n};\n\n/**\n * Helper function to create a query string used for the Open Trivia API\n * @param {Object} userParams - the user specified parameters\n * @returns {String} query string\n */\nconst createQueryString = (userParams) => {\n  let params = [];\n  for (let p in userParams) {\n    if (userParams[p] !== ANY && p !== \"category\") {\n      params.push(p + \"=\" + userParams[p]);\n    } else if (userParams[p] !== ANY && p === \"category\") {\n      params.push(p + \"=\" + findCategoryId(userParams[p]));\n    }\n  }\n  return params.length === 0 ? \"\" : \"?\" + params.join(\"&\");\n};\n\n/**\n * Helper Method finding the ID associated with the\n * @param {String} category - Trivia Category\n * @returns {Number} ID of category\n */\nconst findCategoryId = (category) => {\n  return CATEGORY_ID_MAP[category];\n};\n\nconst App = () => {\n  const [params, setParams] = useState({\n    amount: 1,\n    category: ANY,\n    difficulty: ANY,\n  });\n  const [responseCode, setResponseCode] = useState(0);\n  const [categories, setCategories] = useState(CATEGORIES);\n  const [difficulties, setDifficulties] = useState(QUESTION_DIFFICULTIES);\n  const [quizQuestions, setQuizQuestions] = useState(null);\n  const [questionIdx, setQuestionIdx] = useState(0);\n  const [questionCount, setQuestionCount] = useState(0);\n  const [score, setScore] = useState(0);\n  const [showQuiz, setShowQuiz] = useState(false);\n  const [showSettings, setShowSettings] = useState(true);\n  const [status, setStatus] = useState(STATUS.SUCCESS);\n\n  useEffect(() => {\n    if (status === STATUS.LOADING) {\n      requestQuiz(params)\n        .then((data) => {\n          console.log(data);\n          setResponseCode(data[\"response_code\"]);\n          setQuizQuestions(data[\"results\"]);\n          setQuestionIdx(0);\n          setQuestionCount(data[\"results\"].length);\n          setStatus(STATUS.SUCCESS);\n        })\n        .catch((error) => {\n          setStatus(STATUS.FAIL);\n          console.log(error);\n        });\n    }\n  }, [status, questionIdx, params]);\n\n  /**\n   * Increases quiz score\n   */\n  const increaseScore = () => {\n    setScore(score + 1);\n  };\n\n  /**\n   * Increment Question index.\n   */\n  const nextQuestion = () => {\n    setQuestionIdx(questionIdx + 1);\n  };\n\n  /**\n   * Sets boolean flags to display components\n   * @param {Boolean} showQuiz - flag to show questions (true) or not (false)\n   * @param {Boolean} showSettings - flag to show quiz settings (true) or not (false)\n   */\n  const goToSettingsOrQuiz = (showQuiz, showSettings) => {\n    setShowQuiz(showQuiz);\n    setShowSettings(showSettings);\n  };\n\n  return (\n    <>\n      <NavBar />\n      <FinalScoreModal\n        score={score}\n        questionCount={questionCount}\n        goToSettingsOrQuiz={goToSettingsOrQuiz}\n        updateScore={setScore}\n      />\n      <QuizSettings\n        showSettings={showSettings}\n        categories={categories}\n        difficulties={difficulties}\n        amount={params.amount}\n        category={params.category}\n        difficulty={params.difficulty}\n        updateParams={setParams}\n        updateStatus={setStatus}\n        goToSettingsOrQuiz={goToSettingsOrQuiz}\n      />\n      {status === STATUS.LOADING ? (\n        <Loading />\n      ) : (\n        showQuiz &&\n        questionCount > 0 && (\n          <Question\n            questionNumber={questionIdx + 1}\n            questionCount={questionCount}\n            question={quizQuestions[questionIdx]}\n            increaseScore={increaseScore}\n            nextQuestion={nextQuestion}\n          />\n        )\n      )}\n      <NoMatchMessage\n        status={status}\n        setResponseCode={setResponseCode}\n        setShowSettings={setShowSettings}\n        responseCode={responseCode}\n      />\n      <FailMessage\n        status={status}\n        goToSettingsOrQuiz={goToSettingsOrQuiz}\n        showSettings={showSettings}\n      />\n    </>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import bootstrap from 'bootstrap';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './styles/styles.css';\nimport App from './views/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}